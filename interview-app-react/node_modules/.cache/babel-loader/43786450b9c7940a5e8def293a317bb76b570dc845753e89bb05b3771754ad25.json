{"ast":null,"code":"var _jsxFileName = \"/Users/michaeleakins/BlackholeSoftware/client_code/Collette/interview-apps/interview-app-react/src/pages/Home/index.tsx\",\n  _s = $RefreshSig$();\n// src/pages/Home/index.tsx\n\nimport React, { useState, useEffect } from \"react\";\nimport { Albums } from \"../../components/Albums\";\nimport { fetchArtistData } from \"../../utils/networking\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [albums, setAlbums] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState(\"\");\n\n  // Debounce search term to avoid too many API calls\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      setDebouncedSearchTerm(searchTerm);\n    }, 500);\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [searchTerm]);\n\n  // Fetch data when debounced search term changes\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!debouncedSearchTerm.trim()) {\n        setAlbums([]);\n        return;\n      }\n      setIsLoading(true);\n      setError(null);\n      try {\n        const data = await fetchArtistData(debouncedSearchTerm);\n        const formattedAlbums = data.results.map(album => ({\n          collectionId: album.collectionId,\n          artistName: album.artistName,\n          albumName: album.collectionName,\n          artworkUrl: album.artworkUrl100.replace(\"100x100\", \"200x200\"),\n          releaseDate: album.releaseDate\n        }));\n        setAlbums(formattedAlbums);\n      } catch (err) {\n        setError(\"Failed to fetch albums. Please try again later.\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [debouncedSearchTerm]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    \"data-testid\": \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"iTunes Album Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Search for your favorite artists and discover their albums\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"artist-search\",\n        children: \"Artist/Band Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"artist-search\",\n        type: \"text\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value),\n        placeholder: \"Start typing to search...\",\n        \"data-testid\": \"artist-search-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Albums, {\n      albums: albums,\n      isLoading: isLoading,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"voOZ1VB5HzIE4RoK4Yh+TgPSdy0=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Albums","fetchArtistData","jsxDEV","_jsxDEV","Home","_s","searchTerm","setSearchTerm","albums","setAlbums","isLoading","setIsLoading","error","setError","debouncedSearchTerm","setDebouncedSearchTerm","timerId","setTimeout","clearTimeout","fetchData","trim","data","formattedAlbums","results","map","album","collectionId","artistName","albumName","collectionName","artworkUrl","artworkUrl100","replace","releaseDate","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/michaeleakins/BlackholeSoftware/client_code/Collette/interview-apps/interview-app-react/src/pages/Home/index.tsx"],"sourcesContent":["// src/pages/Home/index.tsx\n\nimport React, { useState, useEffect } from \"react\";\nimport { Albums } from \"../../components/Albums\";\nimport { fetchArtistData } from \"../../utils/networking\";\nimport \"./styles.css\";\n\ninterface ItunesAlbum {\n  collectionId: number;\n  artistName: string;\n  collectionName: string;\n  artworkUrl100: string;\n  releaseDate: string;\n}\n\nconst Home: React.FC = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [albums, setAlbums] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState(\"\");\n\n  // Debounce search term to avoid too many API calls\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      setDebouncedSearchTerm(searchTerm);\n    }, 500);\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [searchTerm]);\n\n  // Fetch data when debounced search term changes\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!debouncedSearchTerm.trim()) {\n        setAlbums([]);\n        return;\n      }\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const data = await fetchArtistData(debouncedSearchTerm);\n\n        const formattedAlbums = data.results.map((album: ItunesAlbum) => ({\n          collectionId: album.collectionId,\n          artistName: album.artistName,\n          albumName: album.collectionName,\n          artworkUrl: album.artworkUrl100.replace(\"100x100\", \"200x200\"),\n          releaseDate: album.releaseDate,\n        }));\n\n        setAlbums(formattedAlbums);\n      } catch (err) {\n        setError(\"Failed to fetch albums. Please try again later.\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [debouncedSearchTerm]);\n\n  return (\n    <div className=\"home-container\" data-testid=\"home-container\">\n      <div className=\"home-header\">\n        <h1>iTunes Album Search</h1>\n        <p>Search for your favorite artists and discover their albums</p>\n      </div>\n\n      <div className=\"search-container\">\n        <label htmlFor=\"artist-search\">Artist/Band Name</label>\n        <input\n          id=\"artist-search\"\n          type=\"text\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          placeholder=\"Start typing to search...\"\n          data-testid=\"artist-search-input\"\n        />\n      </div>\n\n      <Albums albums={albums} isLoading={isLoading} error={error} />\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}